{
    "author": "Lukas Reiter", 
    "plugins": [
        1
    ], 
    "uuid": "7a26b421-073e-4606-8951-cdb86b49b7b4", 
    "version": "v0.1", 
    "script": "\"\"\"\nThis script can be used to perform authorization tests. It provides an alternative, if the\nawesome BApp Authorize does not work.\n\nPer default, this script does not work. We have to update the script's source code\naccording to our needs before we can use it (see TODOs).\n\"\"\"\n\nimport re\nimport json\nimport traceback\n\n# Do the initial setup\nif ref == 1:\n\theader = [\"Ref\", \"Method\", \"URL\", \"Status (Base)\", \"Size (Base)\", \"Status (User 1)\", \"Size (User 1)\", \"Status (Anonymous)\", \"Size (Anonymous)\"]\n\ndef obtain_valid_additional_info(message_info, session_info):\n\t\"\"\"\n\tIf necessary, update this method to obtain and return additional information (e.g., nounce, JWT, etc.),\n\twhich is required by the authorization tests' HTTP requests etc.\n\n\t:param message_info (IHttpRequestResponse): The base request of the user with whom we are working in\n\tthe web browser.\n\t:param session_info (str): Session information (e.g., cookie value) of the second user, which performs the\n\tunauthorized access.\n\t:return (str): The extracted information that is required by the authorization tests' HTTP requests.\n\t\"\"\"\n\tglobal helpers\n\tglobal callbacks\n\tglobal send_http_message\n\t# TODO: Update HTTP request accordingly.\n\trequest_bytes = \"\"\"GET / HTTP/1.1\nHost: # TODO:\nCookie: JSESSIONID={}\n\n\"\"\".format(session_id)\n\t# Send the previously created request to the web application.\n\tmessage_info = send_http_message(request_bytes, message_info.getHttpService())\n\t# Analyze the response to extract and return relevant information.\n\tresponse = message_info.getResponse()\n\tif response:\n\t\t# TODO: Update the following code accordingly\n\t\tbody_offset = response_info.getBodyOffset()\n\t\tbody_bytes = response[body_offset:]\n\t\tbody_content = helpers.bytesToString(body_bytes)\n\t\ttry:\n\t\t\tjson_object = json.JSONDecoder().decode(body_content)\n\t\t\tif \"jwt_token\" in json_object:\n\t\t\t\tresult = json_object[\"jwt_token\"]\n\t\texcept:\n\t\t\ttraceback.print_exc(file=callbacks.getStderr())\n\treturn result\n\ndef send_authenticated_request(message_info, session_info):\n\t\"\"\"\n\tThis method clones the base request and modifies it to impersonate another authenticated user.\n\n\t:param message_info (IHttpRequestResponse): The base request of the user with whom we are working in\n\tthe web browser.\n\t:param session_info (str): The session information of the second authenticated user to successfully\n\texecute the authentication test. This information is either hard-coded or indirectly obtained via\n\tmethod obtain_valid_additional_info.\n\t:return: None\n\t\"\"\"\n\tglobal helpers\n\tglobal callbacks\n\trequest = message_info.getRequest()\n\trequest_info = helpers.analyzeRequest(message_info.getRequest())\n\t# Modify headers\n\theaders = []\n\tfor header in request_info.getHeaders():\n\t\ttmp = header.split(\":\")\n\t\theader_name = tmp[0]\n\t\theader_value = \":\".join(tmp[1:]).strip()\n\t\t# TODO: Update the following if statement to modify session headers for another authenticated user\n\t\tif header_name.lower() == \"authorization\":\n\t\t\theaders.append(\"{}: Bearer {}\".format(header_name, session_info))\n\t\t#elif header_name.lower() == \"cookie\":\n\t\t#\theaders.append(\"{}: {}\".format(header_name, header_value))\n\t\telse:\n\t\t\theaders.append(header)\n\t# Modify content\n\tbody_offset = request_info.getBodyOffset()\n\tbody_bytes = request[body_offset:]\n\tbody_content = helpers.bytesToString(body_bytes)\n\t# If necessary, perform modifications on request body\n\t# TODO\n\t# Compile new request\n\tnew_request = helpers.buildHttpMessage(headers, body_content)\n\treturn callbacks.makeHttpRequest(message_info.getHttpService(), new_request)\n\ndef send_anonymous_request(message_info):\n\t\"\"\"\n\tThis method clones the base request and modifies it to impersonate an anonymous user.\n\n\t:param message_info (IHttpRequestResponse): The base request of the user with whom we are working in\n\tthe web browser.\n\t:return: None\n\t\"\"\"\n\tglobal helpers\n\tglobal callbacks\n\trequest = message_info.getRequest()\n\trequest_info = helpers.analyzeRequest(message_info.getRequest())\n\t# Modify headers\n\theaders = []\n\tfor header in request_info.getHeaders():\n\t\ttmp = header.split(\":\")\n\t\theader_name = tmp[0]\n\t\theader_value = \":\".join(tmp[1:]).strip()\n\t\t# TODO: Update the following if statement to modify session headers for an anonymous user.\n\t\t#       In this example, we just remove the Authorization and Cookie headers.\n\t\tif header_name.lower() not in [\"authorization\", \"cookie\"]:\n\t\t\theaders.append(header)\n\t# Modify content\n\tbody_offset = request_info.getBodyOffset()\n\tbody_bytes = request[body_offset:]\n\tbody_content = helpers.bytesToString(body_bytes)\n\t# If necessary, perform modifications on request body\n\t# TODO\n\t# Compile new request\n\tnew_request = helpers.buildHttpMessage(headers, body_content)\n\treturn callbacks.makeHttpRequest(message_info.getHttpService(), new_request)\n\ndef analyze_response(message_info):\n\t\"\"\"\n\tThis method analyzes extracts all relevant information from the given IHttpRequestResponse\n\tobject that shall be displayed in UI table.\n\n\t:param message_info (IHttpRequestResponse): The request/response item from which information\n\tfor the UI table should be extracted.\n\t\"\"\"\n\tresponse = message_info.getResponse()\n\tif response:\n\t\t# TODO: Update if we want to extract and display additional information.\n\t\tresult = [message_info.getStatusCode(), len(response)]\n\telse:\n\t\t# TODO: This list should have the same number of items as the list in the if branch.\n\t\tresult = [None, None]\n\treturn result\n\ndef do_authorization(message_info):\n\t\"\"\"\n\tThis method specifies the condition when an authorization check should be performed.\n\n\t:param message_info (IHttpRequestResponse): The base request of the user with whom we are working in\n\tthe web browser. This object might be useful to obtain.\n\t\"\"\"\n\tglobal request_info\n\t# TODO: Update this method to limit authorization checks on specific IHttpRequestResponse objects.\n\t#       In this example, we limit authorization checks to requests that contain an Authorization header\n\t#       and which originate form the Burp Suite Proxy or Repeater.\n\tresult = in_scope and tool_flag in [callbacks.TOOL_REPEATER, callbacks.TOOL_PROXY] and has_header(request_info.getHeaders(), \"Authorization\")\n\treturn result\n\n# Process corresponding HTTP requests and responses\n# Caution: Do not remove \"tool_flag != callbacks.TOOL_EXTENDER\" in the following line as it will result in an infinite loop.\nif do_authorization(message_info) and tool_flag != callbacks.TOOL_EXTENDER:\n\t# Initialize the current UI table row and populate it with the information of the base request.\n\trow = [ref, request_info.getMethod(), unicode(url)]\n\trow += analyze_response(message_info)\n\n\t# 1. Authorization test for user 1\n\t#    Before performing the authorization test for the user, we might need to obtain additional information variable\n\t#    the method obtain_valid_additional_info\n\t# session_info = obtain_valid_session_info(message_info, \"TODO\")\n\tsession_info = \"TODO\"\n\timpersonated_message_info = send_authenticated_request(message_info) #, session_info)\n\tmessage_infos[\"User 1\"] = impersonated_message_info\n\trow += analyze_response(impersonated_message_info)\n\n\t# Eventually, we want to add additional users.\n\t#    Before performing the authorization test for the user, we might need to obtain additional information variable\n\t#    the method obtain_valid_additional_info\n\t# session_info = obtain_valid_session_info(message_info, \"TODO\")\n\tsession_info = \"TODO\"\n\timpersonated_message_info = send_authenticated_request(message_info) #, session_info)\n\tmessage_infos[\"User 1\"] = impersonated_message_info\n\trow += analyze_response(impersonated_message_info)\n\n\t# 2. Send and analyze anonymous response\n\tanonymous_message_info = send_anonymous_request(message_info)\n\tmessage_infos[\"Anonymous\"] = anonymous_message_info\n\trow += analyze_response(anonymous_message_info)\n\n\t# Add results to UI table\n\trows.append(row)\n", 
    "name": "Template Script to Perform Customizable Authorization Checks"
}