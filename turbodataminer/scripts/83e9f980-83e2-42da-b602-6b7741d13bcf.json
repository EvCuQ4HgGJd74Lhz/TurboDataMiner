{
    "author": "Lukas Reiter", 
    "plugins": [
        0, 
        6
    ], 
    "uuid": "83e9f980-83e2-42da-b602-6b7741d13bcf", 
    "version": "v0.1", 
    "script": "\"\"\"\nThis script checks whether session cookie values are disclosed in Referer headers, URLs, or response bodies.\n\"\"\"\nimport re\n\n# Do the initial setup\nif ref == 1 or \"in_scope_cookie_names\" not in session or \"cookie_values\" not in session or \"dedup\" not in session:\n\t# TODO: Specify all session cooky names, which are used for authorization, in the following list.\n\tsession[\"in_scope_cookie_names\"] = [\"TODO\"] # [\"JSESSIONID\"]\n\tsession[\"cookie_values\"] = {}\n\tsession[\"dedup\"] = {}\n\theader = [\"Ref.\", \"Host\", \"Path\", \"Disclosed Cookie\", \"In Path\", \"In Referer\", \"In Response Body\"]\n\ndef check_cookie(url, referer = None, body_content = None):\n\t\"\"\"\n\tThis method checks whether the given URL, Referer header value, or response body contains one of the already used session cookie values.\n\t\"\"\"\n\tglobal session\n\tglobal rows\n\n\tfor cookie_value, cookie_regex in session[\"cookie_values\"].items():\n\t\thost = url.getHost()\n\t\tpath = url.getPath()\n\t\tin_path = len(cookie_regex.findall(path)) > 0\n\t\tin_referer = len(cookie_regex.findall(referer)) > 0 if referer else False\n\t\tin_body = len(cookie_regex.findall(body_content)) > 0 if body_content else False\n\t\tkey = \"{}{}{}{}{}\".format(host, path, in_path, in_referer, in_body)\n\n\t\tif (in_path or in_body) and key not in session[\"dedup\"]:\n\t\t\tsession[\"dedup\"][key] = None\n\t\t\trows.append([ref, url.getHost(), url.getPath(), cookie_value, in_path, in_referer, in_body])\n\n_, referer_value = get_header(request_info.getHeaders(), \"Referer\")\n# Process only in-scope HTTP responses\nif in_scope:\n\tresponse = message_info.getResponse()\n\tif response:\n\t\tresponse_info = helpers.analyzeResponse(response)\n\t\tbody_offset = response_info.getBodyOffset()\n\t\tbody_bytes = response[body_offset:]\n\t\tbody_content = helpers.bytesToString(body_bytes)\n\t\tcookies = get_cookies(response_info)\n\n\t\t# Add issued cookies to list of known cookies\n\t\tfor cookie in cookies:\n\t\t\tif cookie[\"name\"] in session[\"in_scope_cookie_names\"] and cookie[\"value\"]:\n\t\t\t\tcookie_value = cookie[\"value\"]\n\t\t\t\tsession[\"cookie_values\"][cookie_value] = re.compile(cookie_value, re.IGNORECASE)\n\n\t\t# Check current URL and response body for known cookies\n\t\tcheck_cookie(url, referer_value, body_content)\n\telse:\n\t\tcheck_cookie(url, referer_value)\nelse:\n\tcheck_cookie(url, referer_value)", 
    "name": "Cookie - Template Script to Detect Session Cookie Disclosure in Referer, URL, and HTML Page"
}