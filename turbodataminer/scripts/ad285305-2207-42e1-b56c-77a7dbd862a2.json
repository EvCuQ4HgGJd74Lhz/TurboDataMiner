{
    "author": "Lukas Reiter", 
    "plugins": [
        0, 
        6
    ], 
    "uuid": "ad285305-2207-42e1-b56c-77a7dbd862a2", 
    "version": "v1.0", 
    "script": "\"\"\"\nThis script extracts JWTs from Authorization headers. Afterwards, it decodes the payload of\neach JWT and converts it into a list, which is then displayed in the table above.\n\nUse this script to analyze the different values per JSON attribute to for example determine\ninconsistencies.\n\"\"\"\nimport re\nimport json\nimport traceback\n\n# Do the initial setup\nif ref == 1 or \"header\" not in session:\n\tsession = {}\n\tsession[\"header\"] = []\n\ndef add_json_object(json_object):\n\t\"\"\"\n\tThis method iterates through the given json_object and adds it to the rows list.\n\t\"\"\"\n\tglobal session\n\tglobal rows\n\tglobal url\n\tglobal ref\n\trow = [ref, url]\n\tfor item in json_object.keys():\n\t\tif item not in session[\"header\"]:\n\t\t\tsession[\"header\"].append(item)\n\tfor item in session[\"header\"]:\n\t\tif item in json_object:\n\t\t\trow.append(json_object[item])\n\t\telse:\n\t\t\trow.append(None)\n\tif row:\n\t\trows = [row]\n\n# Process only in-scope HTTP requests and responses\nif in_scope:\n\trequest_info = helpers.analyzeRequest(message_info.getRequest())\n\ttry:\n\t\tid_tokens = []\n\t\t# Extract authorization header\n\t\tauthorization_header = get_jwt(request_info.getHeaders())\n\t\tif authorization_header:\n\t\t\tid_tokens.append(authorization_header)\n\t\t# TODO: Identify additional JWTs (e.g., from specific parameters) and add them to the id_tokens\n\t\t# list for further analysis. \n\t\tfor token in id_tokens:\n\t\t\t# In this case, we assume that the current token has already been decoded (e.g., by API method get_jwt).\n\t\t\tif not isinstance(token, list):\n\t\t\t\ttoken = decode_jwt(token)\n\t\t\tif token[1]:\n\t\t\t\tjson_object = json.JSONDecoder().decode(token[1])\n\t\t\t\tif json_object:\n\t\t\t\t\tadd_json_object(json_object)\n\texcept:\n\t\ttraceback.print_exc(file=callbacks.getStderr())\n\n# Only at the end, when all different JWT attributes are known, update the UI table's header\nif ref == (row_count - 1):\n\theader = session[\"header\"]", 
    "name": "JWT - Template Script to Display the Payload Attributes of Authorization Headers (One JWT per Table Row)"
}