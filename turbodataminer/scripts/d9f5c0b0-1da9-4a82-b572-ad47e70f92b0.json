{
    "author": "Lukas Reiter", 
    "plugins": [
        0, 
        6
    ], 
    "uuid": "d9f5c0b0-1da9-4a82-b572-ad47e70f92b0", 
    "version": "v1.1", 
    "script": "\"\"\"\nThis script extracts all parameters from in-scope HTTP requests and adds them to the table above\nfor further analysis.\n\nNotes: Update the content of the session[\"filter\"] list to limit your analysis to certain parameter types.\n\"\"\"\nimport traceback\nfrom burp import IParameter\nfrom HTMLParser import HTMLParser\n\n# Do the initial setup\nif ref == 1 or \"dedup\" not in session:\n\tsession[\"dedup\"] = {}\n\t# TODO: Update to limit analysis to certain parameter types.\n\tsession[\"filter\"] = [IParameter.PARAM_URL,\n\t\t\t\t\t\t\t\t\t\t  IParameter.PARAM_BODY,\n\t\t\t\t\t\t\t\t\t\t  IParameter.PARAM_COOKIE ,\n\t\t\t\t\t\t\t\t\t\t  IParameter.PARAM_XML,\n\t\t\t\t\t\t\t\t\t\t  IParameter.PARAM_XML_ATTR ,\n\t\t\t\t\t\t\t\t\t\t  IParameter.PARAM_MULTIPART_ATTR,\n\t\t\t\t\t\t\t\t\t\t  IParameter.PARAM_JSON]\n\theader = [\"Ref.\", \"Host\", \"Path\", \"Content-Length\", \"Type\", \"Parameter\", \"Value\", \"Value (URL decoded)\", \"Reflected\", \"Status\", \"Content-Type (Response)\"]\n\n# Process only in-scope HTTP requests and responses\nif in_scope:\n\thtml_parser = HTMLParser()\n\trequest = message_info.getRequest()\n\tresponse = message_info.getResponse()\n\trequest_info = helpers.analyzeRequest(request)\n\n\t# Extract relevant information from HTTP response\n\tif response:\n\t\tresponse_info = helpers.analyzeResponse(response)\n\t\tcontent_type = get_content_type(response_info.getHeaders())\n\t\tcontent_length = get_content_length(response_info.getHeaders())\n\t\tstatus_code = response_info.getStatusCode()\n\t\tresponse_string = unicode(helpers.bytesToString(response), errors=\"ignore\")\n\t\tcontent_type = content_type if content_type else \"\"\n\t\tcontent_length = content_length if content_length else -1\n\telse:\n\t\tresponse_string = \"\"\n\t\tcontent_type = \"\"\n\t\tstatus_code = \"\"\n\t\tcontent_length = -1\n\n\t# Start analysis\n\tfilter = session[\"filter\"]\n\tfor param in request_info.getParameters():\n\t\tif param.getType() in filter:\n\t\t\tparameter_type = unicode(get_parameter_name(param.getType()), errors=\"ignore\")\n\t\t\tname = unicode(param.getName(), errors=\"ignore\")\n\t\t\tvalue = unicode(param.getValue(), errors=\"ignore\")\n\t\t\tdecoded_value = unicode(html_parser.unescape(helpers.urlDecode(value)), errors='ignore')\n\t\t\treflected = value in response_string or decoded_value in response_string if value else False\n\t\t\thost_name = unicode(get_hostname(url),  errors=\"ignore\")\n\t\t\tpath = unicode(url.getPath(), errors=\"ignore\")\n\t\t\tkey = host_name + path + parameter_type + name + value + unicode(content_length) + unicode(reflected, errors=\"ignore\") + content_type + unicode(status_code, errors=\"ignore\")\n\t\t\tif key not in session[\"dedup\"]:\n\t\t\t\trows.append([ref, host_name, path, content_length, parameter_type, name, value, unicode(helpers.urlDecode(value), errors='ignore'), reflected, status_code, content_type])\n\t\t\t\tsession[\"dedup\"][key] = None\n", 
    "name": "Parameter - Template Script to Extract Parameter Names and Values from All In-Scope Requests"
}